#!/bin/bash

# locals
ENV="staging"
NAME="ponyfoo-$ENV"
KEYFILE="deploy/keys/$ENV"
EMOJI="$(emoji-random)"

# instance-specific
INSTANCE_USER="ubuntu"
INSTANCE=$(aws ec2 describe-instances --filters Name=tag:Name,Values=$NAME)
INSTANCE_ID=$(echo "$INSTANCE" | jq -r .Reservations[0].Instances[0].InstanceId)
PUBLIC_DNS=$(echo "$INSTANCE" | jq -r .Reservations[0].Instances[0].PublicDnsName)

APP="~/apps/$ENV"
APP_VERSIONS="$APP/v"
APP_LIVE="$APP/live"
APP_CONFIG="$APP/config"
APP_SCRIPT="$APP_LIVE/app.js"
RSYNC="~/apps/.rsync/$ENV"
RSYNC_REPO="$RSYNC/app"

# bump package.json
npm version patch
VERSION=$(cat package.json | jq -r .version)
npm version $VERSION-$ENV -m "Upgrade to %s because deploy $EMOJI"
VERSION=$(cat package.json | jq -r .version)

APP_LATEST="$APP_VERSIONS/$VERSION"

# upload modifications
rsync \
  -az \
  --stats \
  --delete \
  --exclude-from .rsyncignore \
  -e "ssh -o StrictHostKeyChecking=no -i $KEYFILE" \
  . \
  $INSTANCE_USER@$PUBLIC_DNS:$RSYNC_REPO

# jump into instance
ssh -tti $KEYFILE -o StrictHostKeyChecking=no $INSTANCE_USER@$PUBLIC_DNS << EOF

  pm2_start_or_reload () {
    ONLINE=$(pm2 jlist | jq length)
    if [ "$ONLINE" == "0" ] ; then
      pm2 start -i 2 --name $NAME $APP_SCRIPT
    else
      pm2 reload $NAME
    fi
  }

  cp -r $RSYNC_REPO $APP_LATEST
  ln -sfn $APP_LATEST $APP_LIVE
  ln -sfn $APP_CONFIG/.env $APP_LATEST/.env
  rm -rf `ls -t $APP_VERSIONS | tail -n +11`
  npm --prefix $APP_LATEST install --production
  sudo nginx -s reload
  pm2_start_or_reload
EOF

echo "Deployed v$VERSION to $ENV"
