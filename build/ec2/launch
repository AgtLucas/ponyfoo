  #!/bin/bash

# locals
ENV="staging"
NAME="ponyfoo-$ENV"
KEYFILE="deploy/keys/$ENV"

# stack specific
SERVER_NAME="ponyfoo.com"
NODE_VERSION="0.10"
NGINX_WORKERS="4"

# instance specific
REGION="us-east-1"
IMAGE_ID="ami-08389d60"
INSTANCE_TYPE="t1.micro"
INSTANCE_USER="ubuntu"
SECURITY_GROUP="standard"
PLATFORM="ubuntu"
COUNT="1"

if ! hash jq 2>/dev/null ; then
  echo "You need to install jq\n\
  brew install jq"
  exit
fi

if [ ! -f ~/.aws/config ] ; then
  echo "You need to install awscli and configure it!\n\
  pip install awscli\n\
  aws configure\n"
  exit
fi

if [ -f $KEYFILE ] ; then
  echo "Key file already exists!"
  exit
fi

# directories
mkdir -p deploy/keys

# rsa key
ssh-keygen -t rsa -b 4096 -N "" -f $KEYFILE
aws ec2 import-key-pair --key-name $NAME --public-key-material file://$KEYFILE.pub

# launch instance
echo "Launching instance..."

RESOURCE_ID=$(aws ec2 run-instances \
  --image-id $IMAGE_ID \
  --instance-type $INSTANCE_TYPE \
  --count $COUNT \
  --key-name $NAME \
  --security-groups $SECURITY_GROUP | jq -r .Instances[0].InstanceId)

echo "$RESOURCE_ID: launched"

# tag instance
aws ec2 create-tags --resources $RESOURCE_ID --tag Key=Name,Value=$NAME
echo "$RESOURCE_ID: tagged $NAME"

# assign ip address
IP_ADDRESS=$(aws ec2 allocate-address | jq -r .PublicIp)
echo "$RESOURCE_ID: IP $IP_ADDRESS created"

aws ec2 associate-address --instance-id $RESOURCE_ID --public-ip $IP_ADDRESS
echo "$RESOURCE_ID: IP $IP_ADDRESS assigned to instance"

# warming up, wait...

PUBLIC_DNS="null"
while [ $PUBLIC_DNS == "null" ]
do
  echo "$RESOURCE_ID: Polling for public DNS..."
  PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $RESOURCE_ID | jq -r .Reservations[0].Instances[0].PublicDnsName)
done

echo "$RESOURCE_ID: DNS is $PUBLIC_DNS"

ATTEMPTS="0"

while [ "$SUCCESS" != "0" ]
do
  ATTEMPTS=$[$ATTEMPTS +1]
  echo "$RESOURCE_ID: Establishing ssh connection... ($ATTEMPTS)"
  sleep 3
  ssh -tti $KEYFILE -o ConnectTimeout=3 -o StrictHostKeyChecking=no -q $INSTANCE_USER@$PUBLIC_DNS exit
  SUCCESS=$?
done

### setup

APP="~/apps/$ENV"
APP_NGINX="$APP/nginx"
APP_VERSIONS="$APP/v"
APP_LIVE="$APP/live"
APP_STATIC_ROOT="$APP_LIVE/.bin/public"
RSYNC="~/apps/.rsync/$ENV"
RSYNC_NGINX="$RSYNC/nginx"
RSYNC_REPO="$RSYNC/app"
RSYNC_CONFIG="$RSYNC/config"

# jump into instance
ssh -tti $KEYFILE -o ConnectTimeout=10 -o StrictHostKeyChecking=no $INSTANCE_USER@$PUBLIC_DNS << EOF_INITIAL
  # aptitude comes first!
  sudo apt-key update
  sudo apt-get update

  #forwarding
  cp /etc/sysctl.conf /tmp/
  echo "net.ipv4.ip_forward = 1" >> /tmp/sysctl.conf
  sudo cp /tmp/sysctl.conf /etc/
  sudo sysctl -p /etc/sysctl.conf

  # forward port 80 to 8080
  sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
  sudo iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT
  sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
  sudo iptables-save

  # expected directory structure
  mkdir -p $APP_VERSIONS
  mkdir -p $RSYNC_NGINX
  mkdir -p $RSYNC_REPO
  mkdir -p $RSYNC_CONFIG

  # nvm
  curl https://raw.githubusercontent.com/creationix/nvm/v0.15.0/install.sh | bash

  # nginx
  sudo apt-get install nginx -y
  sudo service nginx start
EOF_INITIAL

# jump into instance once again
ssh -tti $KEYFILE -o ConnectTimeout=10 -o StrictHostKeyChecking=no $INSTANCE_USER@$PUBLIC_DNS << EOF_NODE
  # nodejs
  nvm install $NODE_VERSION
  nvm alias default $NODE_VERSION

  # pm2
  sudo apt-get install make g++ -y
  npm install -g pm2
  pm2 startup $PLATFORM
EOF_NODE

# transfer nginx templates
rsync \
  -az \
  --stats \
  --delete \
  -e "ssh -o StrictHostKeyChecking=no -i $KEYFILE" \
  build/ec2/nginx \
  $INSTANCE_USER@$PUBLIC_DNS:$RSYNC_NGINX

# jump into instance again
ssh -tti $KEYFILE -o ConnectTimeout=10 -o StrictHostKeyChecking=no $INSTANCE_USER@$PUBLIC_DNS << EOF_NGINX_TEMPLATES
  cp -r $RSYNC_NGINX $APP_NGINX

  # replace variables
  sed -i 's/{NGINX_USER}/$INSTANCE_USER/g;s/{NGINX_WORKERS}/$NGINX_WORKERS/g' $APP_NGINX/http.conf
  sed -i 's/{SERVER_NAME}/$SERVER_NAME/g;s/{STATIC_ROOT}/$APP_STATIC_ROOT/g' $APP_NGINX/server.conf

  sudo ln -sfn $APP_NGINX/http.conf /etc/nginx/http.conf
  sudo ln -sfn $APP_NGINX/server.conf /etc/nginx/server.conf
EOF_NGINX_TEMPLATES
